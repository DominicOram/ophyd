[metadata]
name = ophyd
description = Bluesky hardware abstraction with an emphasis on EPICS
url = https://github.com/bluesky/ophyd
license = BSD
long_description = file: README.rst
long_description_content_type = text/x-rst
classifiers =
    License :: OSI Approved :: BSD License
    Development Status :: 5 - Production/Stable
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9

[options]
python_requires = >=3.8
packages = find:  
setup_requires =
    setuptools_scm[toml]>=6.2

# Specify any package dependencies below.
install_requires =
    networkx>=2.0
    numpy
    packaging
    pint

[options.extras_require]
# For development tests/docs
dev =
    attrs>=19.3.0
    black==22.3.0
    bluesky>=1.7.0
    caproto[standard] >=0.4.2rc1
    codecov
    databroker>=1.0.0b1
    doctr
    epics-pypdb
    # Upper bound on flake8 while flake8-isort catches up
    # https://github.com/gforcada/flake8-isort/issues/115
    flake8<5.0.0
    flake8-isort
    h5py
    inflection
    ipython
    ipywidgets
    matplotlib
    mypy
    myst-parser
    numpydoc
    pre-commit
    pyepics>=3.4.2
    pytest
    pytest-cov    
    pytest-faulthandler
    pytest-rerunfailures
    pytest-timeout
    pipdeptree
    setuptools_scm[toml]>=6.2
    sphinx>=1.8.1,!=2.0.0
    sphinx_rtd_theme
    tox

# Specify any package data to be included in the wheel below.
[options.package_data]
ophyd =
    # Include our documentation helpers:
    "*.rst"

[options.entry_points]
databroker.handlers =
    NPY_SEQ = ophyd.sim:NumpySeqHandler

[mypy]
# Ignore missing stubs for modules we use
ignore_missing_imports = True

[isort]
profile=black

[flake8]
max-line-length = 115
extend-ignore =
    W504,
    W503,
    E203,  # See https://github.com/PyCQA/pycodestyle/issues/373
    F811,  # support typing.overload decorator
    F722,  # allow Annotated[typ, some_func("some string")]
exclude =
    ui_*
    .tox
    .venv
    docs/source,
    ophyd/areadetector/docs.py

[coverage:run]
concurrency=
    thread
    multiprocessing
data_file = /tmp/ophyd.coverage

# Use tox to provide parallel linting and testing
# NOTE that we pre-install all tools in the dev dependencies (including tox).
# Hence the use of allowlist_externals instead of using the tox virtualenvs.
# This ensures a match between developer time tools in the IDE and tox tools.
[tox:tox]
minversion = 3.7
skipsdist=true
skipinstall=true

[testenv:{pre-commit,mypy,pytest}]
passenv =
    PYTHONPATH
    HOME
allowlist_externals = 
    pytest 
    pre-commit
    mypy
commands =
    pytest: pytest {posargs}
    mypy: mypy ophyd {posargs}
    pre-commit: pre-commit run --all-files {posargs}
